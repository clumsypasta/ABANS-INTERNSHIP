TITLE: Defining Task Interfaces and Types (TypeScript)
DESCRIPTION: Defines the core Task interface representing a stateful interaction, its status structure, update event formats for status and artifacts, parameters for sending/creating tasks, and the possible states a task can be in. It outlines the properties like unique ID, session ID, current status, history of messages, generated artifacts, and metadata.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_1

LANGUAGE: typescript
CODE:
```
interface Task {
  id: string; // unique identifier for the task
  sessionId: string; // client-generated id for the session holding the task.
  status: TaskStatus; // current status of the task
  history?: Message[];
  artifacts?: Artifact[]; // collection of artifacts created by the agent.
  metadata?: Record<string, any>; // extension metadata
}
// TaskState and accompanying message.
interface TaskStatus {
  state: TaskState;
  message?: Message; //additional status updates for client
  timestamp?: string; // ISO datetime value
}
// sent by server during sendSubscribe or subscribe requests
interface TaskStatusUpdateEvent {
  id: string; //Task id
  status: TaskStatus;
  final: boolean; //indicates the end of the event stream
  metadata?: Record<string, any>;
}
// sent by server during sendSubscribe or subscribe requests
interface TaskArtifactUpdateEvent {
  id: string; //Task id
  artifact: Artifact;
  metadata?: Record<string, any>;
}
// Sent by the client to the agent to create, continue, or restart a task.
interface TaskSendParams {
  id: string;
  sessionId?: string; //server creates a new sessionId for new tasks if not set
  message: Message;
  historyLength?: number; //number of recent messages to be retrieved
  // where the server should send notifications when disconnected.
  pushNotification?: PushNotificationConfig;
  metadata?: Record<string, any>; // extension metadata
}
type TaskState =
  | "submitted"
  | "working"
  | "input-required"
  | "completed"
  | "canceled"
  | "failed"
  | "unknown";
```

----------------------------------------

TITLE: Define Task and Related Interfaces (TypeScript)
DESCRIPTION: Defines the core Task interface for managing client-agent collaboration, including its status, history, and associated artifacts. Includes interfaces for status updates, event types, parameters for initiating or continuing tasks, and the possible states of a task.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/agent-to-agent-communication.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface Task {
  id: string; // unique identifier for the task
  sessionId: string; // client-generated id for the session holding the task.
  status: TaskStatus; // current status of the task
  history?: Message[];
  artifacts?: Artifact[]; // collection of artifacts created by the agent.
  metadata?: Record<string, any>; // extension metadata
}
// TaskState and accompanying message.
interface TaskStatus {
  state: TaskState;
  message?: Message; //additional status updates for client
  timestamp?: string; // ISO datetime value
}
// sent by server during sendSubscribe or subscribe requests
interface TaskStatusUpdateEvent {
  id: string; //Task id
  status: TaskStatus;
  final: boolean; //indicates the end of the event stream
  metadata?: Record<string, any>;
}
// sent by server during sendSubscribe or subscribe requests
interface TaskArtifactUpdateEvent {
  id: string; //Task id
  artifact: Artifact;
  metadata?: Record<string, any>;
}
// Sent by the client to the agent to create, continue, or restart a task.
interface TaskSendParams {
  id: string;
  sessionId?: string; //server creates a new sessionId for new tasks if not set
  message: Message;
  historyLength?: number; //number of recent messages to be retrieved
  // where the server should send notifications when disconnected.
  pushNotification?: PushNotificationConfig;
  metadata?: Record<string, any>; // extension metadata
}
type TaskState =
  | "submitted"
  | "working"
  | "input-required"
  | "completed"
  | "canceled"
  | "failed"
  | "unknown";
```

----------------------------------------

TITLE: Defining the Artifact Interface (TypeScript)
DESCRIPTION: Defines the structure of an Artifact, which represents immutable results generated by agents as part of a Task. It can have a name, description, multiple parts, metadata, an index, and flags indicating if parts are appended or if it's the last chunk.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_2

LANGUAGE: typescript
CODE:
```
interface Artifact {
  name?: string;
  description?: string;
  parts: Part[];
  metadata?: Record<string, any>;
  index: number;
  append?: boolean;
  lastChunk?: boolean;
}
```

----------------------------------------

TITLE: Defining Error Message Interface (TypeScript)
DESCRIPTION: Defines the structure for error messages sent from the server to the client. It includes a numeric error code, a human-readable message, and optional additional data.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_25

LANGUAGE: TypeScript
CODE:
```
interface ErrorMessage {
  code: number;
  message: string;
  data?: any;
}
```

----------------------------------------

TITLE: Defining A2A Task Manager Interface Methods - Python
DESCRIPTION: Shows the required method signatures for implementing the `InMemoryTaskManager` interface in `Google-A2A`. These methods handle incoming task requests (`on_send_task`) and task subscription requests (`on_send_task_subscribe`).
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/6-start-server.md#_snippet_0

LANGUAGE: python
CODE:
```
async def on_send_task(
  self,
  request: SendTaskRequest
) -> SendTaskResponse:
  """
  This method queries or creates a task for the agent.
  The caller will receive exactly one response.
  """
  pass

async def on_send_task_subscribe(
  self,
  request: SendTaskStreamingRequest
) -> AsyncIterable[SendTaskStreamingResponse] | JSONRPCResponse:
  """
  This method subscribes the caller to future updates regarding a task.
  The caller will receive a response and additionally receive subscription
  updates over a session established between the client and the server
  """
  pass
```

----------------------------------------

TITLE: Defining the AgentCard Interface in TypeScript
DESCRIPTION: This TypeScript interface defines the structure for an Agent Card, detailing its name, description, URL, provider, version, documentation URL, capabilities (streaming, push notifications, state transition history), authentication requirements, default input/output modes, and a list of skills with their own properties.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// An AgentCard conveys key information:\n// - Overall details (version, name, description, uses)\n// - Skills: A set of capabilities the agent can perform\n// - Default modalities/content types supported by the agent.\n// - Authentication requirements\ninterface AgentCard {\n  // Human readable name of the agent.\n  // (e.g. "Recipe Agent")\n  name: string;\n  // A human-readable description of the agent. Used to assist users and\n  // other agents in understanding what the agent can do.\n  // (e.g. "Agent that helps users with recipes and cooking.")\n  description: string;\n  // A URL to the address the agent is hosted at.\n  url: string;\n  // The service provider of the agent\n  provider?: {\n    organization: string;\n    url: string;\n  };\n  // The version of the agent - format is up to the provider. (e.g. "1.0.0")\n  version: string;\n  // A URL to documentation for the agent.\n  documentationUrl?: string;\n  // Optional capabilities supported by the agent.\n  capabilities: {\n    streaming?: boolean; // true if the agent supports SSE\n    pushNotifications?: boolean; // true if the agent can notify updates to client\n    stateTransitionHistory?: boolean; //true if the agent exposes status change history for tasks\n  };\n  // Authentication requirements for the agent.\n  // Intended to match OpenAPI authentication structure.\n  authentication: {\n    schemes: string[]; // e.g. Basic, Bearer\n    credentials?: string; //credentials a client should use for private cards\n  };\n  // The set of interaction modes that the agent\n  // supports across all skills. This can be overridden per-skill.\n  defaultInputModes: string[]; // supported mime types for input\n  defaultOutputModes: string[]; // supported mime types for output\n  // Skills are a unit of capability that an agent can perform.\n  skills: {\n    id: string; // unique identifier for the agent's skill\n    name: string; //human readable name of the skill\n    // description of the skill - will be used by the client or a human\n    // as a hint to understand what the skill does.\n    description: string;\n    // Set of tag words describing classes of capabilities for this specific\n    // skill (e.g. "cooking", "customer support", "billing")\n    tags: string[];\n    // The set of example scenarios that the skill can perform.\n    // Will be used by the client as a hint to understand how the skill can be\n    // used. (e.g. "I need a recipe for bread")\n    examples?: string[]; // example prompts for tasks\n    // The set of interaction modes that the skill supports\n    // (if different than the default)\n    inputModes?: string[]; // supported mime types for input\n    outputModes?: string[]; // supported mime types for output\n  }[];\n}
```

----------------------------------------

TITLE: Sample Send Task Request - JSON
DESCRIPTION: Illustrates the JSON-RPC request payload used by a client to send a task to a remote agent. It includes the JSON-RPC version, request ID, method name ("tasks/send"), and parameters containing the task ID, the message content (role and parts), and optional metadata.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_7

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "tasks/send",
  "params": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "message": {
      "role": "user",
      "parts": [
        {
          "type": "text",
          "text": "tell me a joke"
        }
      ]
    },
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: Task Lifecycle - A2A Concept
DESCRIPTION: Describes the states a task progresses through, from submission to completion or failure.
SOURCE: https://github.com/google/a2a/blob/main/llms.txt#_snippet_20

LANGUAGE: Concept Description
CODE:
```
Concept: Task Lifecycle
Description: Tasks progress through states defined in TaskState (submitted -> working -> [input-required] -> completed/canceled/failed).
```

----------------------------------------

TITLE: Streaming - A2A Concept
DESCRIPTION: Mechanism for long-running tasks to provide real-time updates using SSE via specific update events.
SOURCE: https://github.com/google/a2a/blob/main/llms.txt#_snippet_22

LANGUAGE: Concept Description
CODE:
```
Concept: Streaming
Description: Long-running tasks provide real-time updates via SSE using TaskStatusUpdateEvent and TaskArtifactUpdateEvent.
```

----------------------------------------

TITLE: Send Task Request JSON
DESCRIPTION: Sample JSON RPC request to send content to a remote agent to start, resume, or reopen a task.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "tasks/send",
  "params": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "message": {
      "role": "user",
      "parts": [
        {
          "type": "text",
          "text": "tell me a joke"
        }
      ]
    },
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: Agent Discovery - A2A Concept
DESCRIPTION: Process by which clients find agents and their capabilities, typically by fetching the AgentCard JSON from a well-known location.
SOURCE: https://github.com/google/a2a/blob/main/llms.txt#_snippet_19

LANGUAGE: Concept Description
CODE:
```
Concept: Agent Discovery
Description: Clients find agents and capabilities via AgentCard JSON (e.g., from /.well-known/agent.json).
```

----------------------------------------

TITLE: Declaring Agent Capabilities (JSON)
DESCRIPTION: This JSON snippet shows a portion of an agent's configuration, specifically demonstrating how the agent declares its capabilities, such as support for 'streaming' and 'pushNotifications', within the 'capabilities' object.
SOURCE: https://github.com/google/a2a/blob/main/docs/topics/push-notifications.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "your-agent-name",
  "description": "your-agent-description"
  ...

  "capabilities": {
    "streaming": true,
    "pushNotifications": false,
    "stateTransitionHistory": false
  }

  ...
}
```

----------------------------------------

TITLE: Define Artifact Interface (TypeScript)
DESCRIPTION: Defines the interface for an Artifact, which represents the results generated by an agent for a task. Artifacts are immutable and can consist of multiple parts, supporting streaming capabilities via append and lastChunk flags.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/agent-to-agent-communication.md#_snippet_1

LANGUAGE: typescript
CODE:
```
interface Artifact {
  name?: string;
  description?: string;
  parts: Part[];
  metadata?: Record<string, any>;
  index: number;
  append?: boolean;
  lastChunk?: boolean;
}
```

----------------------------------------

TITLE: TypeScript Interface for Agent Card Structure
DESCRIPTION: Defines the structure of the Agent Card JSON object using a TypeScript interface. It includes properties for agent metadata (name, version, URL), optional capabilities (streaming, push notifications), authentication requirements, default input/output modes, and a list of supported skills with their own details.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/agent-card.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// An AgentCard conveys key information:
// - Overall details (version, name, description, uses)
// - Skills: A set of capabilities the agent can perform
// - Default modalities/content types supported by the agent.
// - Authentication requirements
interface AgentCard {
  // Human readable name of the agent.
  // (e.g. "Recipe Agent")
  name: string;
  // A human-readable description of the agent. Used to assist users and
  // other agents in understanding what the agent can do.
  // (e.g. "Agent that helps users with recipes and cooking.")
  description: string;
  // A URL to the address the agent is hosted at.
  url: string;
  // The service provider of the agent
  provider?: {
    organization: string;
    url: string;
  };
  // The version of the agent - format is up to the provider. (e.g. "1.0.0")
  version: string;
  // A URL to documentation for the agent.
  documentationUrl?: string;
  // Optional capabilities supported by the agent.
  capabilities: {
    streaming?: boolean; // true if the agent supports SSE
    pushNotifications?: boolean; // true if the agent can notify updates to client
    stateTransitionHistory?: boolean; //true if the agent exposes status change history for tasks
  };
  // Authentication requirements for the agent.
  // Intended to match OpenAPI authentication structure.
  authentication: {
    schemes: string[]; // e.g. Basic, Bearer
    credentials?: string; //credentials a client should use for private cards
  };
  // The set of interaction modes that the agent
  // supports across all skills. This can be overridden per-skill.
  defaultInputModes: string[]; // supported mime types for input
  defaultOutputModes: string[]; // supported mime types for output
  // Skills are a unit of capability that an agent can perform.
  skills: {
    id: string; // unique identifier for the agent's skill
    name: string; //human readable name of the skill
    // description of the skill - will be used by the client or a human
    // as a hint to understand what the skill does.
    description: string;
    // Set of tag words describing classes of capabilities for this specific
    // skill (e.g. "cooking", "customer support", "billing")
    tags: string[];
    // The set of example scenarios that the skill can perform.
    // Will be used by the client as a hint to understand how the skill can be
    // used. (e.g. "I need a recipe for bread")
    examples?: string[]; // example prompts for tasks
    // The set of interaction modes that the skill supports
    // (if different than the default)
    inputModes?: string[]; // supported mime types for input
    outputModes?: string[]; // supported mime types for output
  }[];
}
```

----------------------------------------

TITLE: Basic A2A Client Usage in TypeScript
DESCRIPTION: Demonstrates how to initialize the A2AClient and use it to send and retrieve tasks. The example shows importing necessary types, creating a client instance, sending a task with a simple text message, and querying task status using the client's methods.
SOURCE: https://github.com/google/a2a/blob/main/samples/js/src/client/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { A2AClient, Task, TaskQueryParams, TaskSendParams } from "./client"; // Import necessary types
import { v4 as uuidv4 } from "uuid"; // Example for generating task IDs

const client = new A2AClient("http://localhost:41241"); // Replace with your server URL

async function run() {
  try {
    // Send a simple task (pass only params)
    const taskId = uuidv4();
    const sendParams: TaskSendParams = {
      id: taskId,
      message: { role: "user", parts: [{ text: "Hello, agent!", type: "text" }] },
    };
    // Method now returns Task | null directly
    const taskResult: Task | null = await client.sendTask(sendParams);
    console.log("Send Task Result:", taskResult);

    // Get task status (pass only params)
    const getParams: TaskQueryParams = { id: taskId };
    // Method now returns Task | null directly
    const getTaskResult: Task | null = await client.getTask(getParams);
    console.log("Get Task Result:", getTaskResult);
  } catch (error) {
    console.error("A2A Client Error:", error);
  }
}

run();
```

----------------------------------------

TITLE: Implementing Simple A2A Task Manager - Python
DESCRIPTION: Provides a basic implementation of the `InMemoryTaskManager` interface. The `on_send_task` method processes a request, updates the task state to `COMPLETED`, and returns an echo response. The `on_send_task_subscribe` method is left unimplemented in this example. Includes a helper method `_update_task` for modifying task status and response.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/6-start-server.md#_snippet_1

LANGUAGE: python
CODE:
```
from typing import AsyncIterable

import google_a2a
from google_a2a.common.server.task_manager import InMemoryTaskManager
from google_a2a.common.types import (
  Artifact,
  JSONRPCResponse,
  Message,
  SendTaskRequest,
  SendTaskResponse,
  SendTaskStreamingRequest,
  SendTaskStreamingResponse,
  Task,
  TaskState,
  TaskStatus,
  TaskStatusUpdateEvent,
)

class MyAgentTaskManager(InMemoryTaskManager):
  def __init__(self):
    super().__init__()

  async def on_send_task(self, request: SendTaskRequest) -> SendTaskResponse:
    # Upsert a task stored by InMemoryTaskManager
    await self.upsert_task(request.params)

    task_id = request.params.id
    # Our custom logic that simply marks the task as complete
    # and returns the echo text
    received_text = request.params.message.parts[0].text
    task = await self._update_task(
      task_id=task_id,
      task_state=TaskState.COMPLETED,
      response_text=f"on_send_task received: {received_text}"
    )

    # Send the response
    return SendTaskResponse(id=request.id, result=task)

  async def on_send_task_subscribe(
    self,
    request: SendTaskStreamingRequest
  ) -> AsyncIterable[SendTaskStreamingResponse] | JSONRPCResponse:
    pass

  async def _update_task(
    self,
    task_id: str,
    task_state: TaskState,
    response_text: str,
  ) -> Task:
    task = self.tasks[task_id]
    agent_response_parts = [
      {
        "type": "text",
        "text": response_text,
      }
    ]
    task.status = TaskStatus(
      state=task_state,
      message=Message(
        role="agent",
        parts=agent_response_parts,
      )
    )
    task.artifacts = [
      Artifact(
        parts=agent_response_parts,
      )
    ]
    return task
```

----------------------------------------

TITLE: Streaming Implementation with A2A Client in TypeScript
DESCRIPTION: Shows how to implement streaming task updates using A2AClient. The example demonstrates subscribing to task events, handling different event types (status updates and artifact updates), and properly processing the streaming response until the server signals completion.
SOURCE: https://github.com/google/a2a/blob/main/samples/js/src/client/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import {
  A2AClient,
  TaskStatusUpdateEvent,
  TaskArtifactUpdateEvent,
  TaskSendParams, // Use params type directly
} from "./client"; // Adjust path if necessary
import { v4 as uuidv4 } from "uuid";

const client = new A2AClient("http://localhost:41241");

async function streamTask() {
  const streamingTaskId = uuidv4();
  try {
    console.log(`\n--- Starting streaming task ${streamingTaskId} ---`);
    // Construct just the params
    const streamParams: TaskSendParams = {
      id: streamingTaskId,
      message: { role: "user", parts: [{ text: "Stream me some updates!", type: "text" }] },
    };
    // Pass only params to the client method
    const stream = client.sendTaskSubscribe(streamParams);

    // Stream now yields the event payloads directly
    for await (const event of stream) {
      // Type guard to differentiate events based on structure
      if ("status" in event) {
        // It's a TaskStatusUpdateEvent
        const statusEvent = event as TaskStatusUpdateEvent; // Cast for clarity
        console.log(
          `[${streamingTaskId}] Status Update: ${statusEvent.status.state} - ${
            statusEvent.status.message?.parts[0]?.text ?? "No message"
          }`
        );
        if (statusEvent.final) {
          console.log(`[${streamingTaskId}] Stream marked as final.`);
          break; // Exit loop when server signals completion
        }
      } else if ("artifact" in event) {
        // It's a TaskArtifactUpdateEvent
        const artifactEvent = event as TaskArtifactUpdateEvent; // Cast for clarity
        console.log(
          `[${streamingTaskId}] Artifact Update: ${
            artifactEvent.artifact.name ??
            `Index ${artifactEvent.artifact.index}`
          } - Part Count: ${artifactEvent.artifact.parts.length}`
        );
        // Process artifact content (e.g., artifactEvent.artifact.parts[0].text)
      } else {
        console.warn("Received unknown event structure:", event);
      }
    }
    console.log(`--- Streaming task ${streamingTaskId} finished ---`);
  } catch (error) {
    console.error(`Error during streaming task ${streamingTaskId}:`, error);
  }
}

streamTask();
```

----------------------------------------

TITLE: Defining Agent Skill and CLI Entrypoint (Python)
DESCRIPTION: Sets up basic logging, imports necessary libraries including 'click' and 'google_a2a' types, and defines the main command-line entry point using 'click'. It initializes an 'AgentSkill' object with details about the 'Echo Tool'.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/5-add-agent-card.md#_snippet_1

LANGUAGE: python
CODE:
```
import logging

import click
from dotenv import load_dotenv
import google_a2a
from google_a2a.common.types import AgentSkill, AgentCapabilities, AgentCard

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@click.command()
@click.option("--host", default="localhost")
@click.option("--port", default=10002)
def main(host, port):
  skill = AgentSkill(
    id="my-project-echo-skill",
    name="Echo Tool",
    description="Echos the input given",
    tags=["echo", "repeater"],
    examples=["I will see this echoed back to me"],
    inputModes=["text"],
    outputModes=["text"],
  )
  logging.info(skill)

if __name__ == "__main__":
  main()
```

----------------------------------------

TITLE: Send Task Message & Subscribe - A2A RPC
DESCRIPTION: Sends a message and subscribes to real-time task updates via Server-Sent Events (SSE).
SOURCE: https://github.com/google/a2a/blob/main/llms.txt#_snippet_1

LANGUAGE: RPC Definition
CODE:
```
Method: tasks/sendSubscribe
Type: Request/Stream
Params: TaskSendParams
Result (stream events): TaskStatusUpdateEvent or TaskArtifactUpdateEvent (final event has final: true)
```

----------------------------------------

TITLE: Requesting Structured JSON Output (JSON)
DESCRIPTION: Sends a JSON-RPC request including a user message and metadata specifying the desired output format (JSON) and a JSON schema for the expected structure.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_25

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 9,
  "method": "tasks/send",
  "params": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
    "message": {
      "role": "user",
      "parts": [
        {
          "type": "text",
          "text": "Show me a list of my open IT tickets",
          "metadata": {
            "mimeType": "application/json",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "ticketNumber": { "type": "string" },
                  "description": { "type": "string" }
                }
              }
            }
          }
        }
      ]
    },
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: Example A2A tasks/sendSubscribe JSON Request Body
DESCRIPTION: Illustrative JSON payload for a POST request sent via the A2A protocol to the agent's tasks/sendSubscribe endpoint. This payload specifies the task ID, session, desired output modes, and the user message.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/ag2/README.md#_snippet_10

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "tasks/sendSubscribe",
  "params": {
    "id": "mcp-task-01",
    "sessionId": "user-session-123",
    "acceptedOutputModes": [
      "text"
    ],
    "message": {
      "role": "user",
      "parts": [
        {
          "type": "text",
          "text": "Summarize this video: https://www.youtube.com/watch?v=kQmXtrmQ5Zg"
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Implement A2A Streaming Task Manager Logic (Python)
DESCRIPTION: Provides the core server-side implementation for handling streaming tasks. It includes methods to simulate streaming messages (`_stream_3_messages`), handle client subscriptions (`on_send_task_subscribe`), manage task state, and enqueue events for Server-Sent Events (SSE).
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/8-agent-capabilities.md#_snippet_1

LANGUAGE: python
CODE:
```
import asyncio
# ...
class MyAgentTaskManager(InMemoryTaskManager):
  # ...
  async def _stream_3_messages(self, request: SendTaskStreamingRequest):
    task_id = request.params.id
    received_text = request.params.message.parts[0].text

    text_messages = ["one", "two", "three"]
    for text in text_messages:
      parts = [
        {
          "type": "text",
          "text": f"{received_text}: {text}",
        }
      ]
      message = Message(role="agent", parts=parts)
      is_last = text == text_messages[-1]
      task_state = TaskState.COMPLETED if is_last else TaskState.WORKING
      task_status = TaskStatus(
        state=task_state,
        message=message
      )
      task_update_event = TaskStatusUpdateEvent(
        id=request.params.id,
        status=task_status,
        final=is_last,
      )
      await self.enqueue_events_for_sse(
        request.params.id,
        task_update_event
      )

  async def on_send_task_subscribe(
    self,
    request: SendTaskStreamingRequest
  ) -> AsyncIterable[SendTaskStreamingResponse] | JSONRPCResponse:
    # Upsert a task stored by InMemoryTaskManager
    await self.upsert_task(request.params)

    task_id = request.params.id
    # Create a queue of work to be done for this task
    sse_event_queue = await self.setup_sse_consumer(task_id=task_id)

    # Start the asynchronous work for this task
    asyncio.create_task(self._stream_3_messages(request))

    # Tell the client to expect future streaming responses
    return self.dequeue_events_for_sse(
      request_id=request.id,
      task_id=task_id,
      sse_event_queue=sse_event_queue,
    )
```

----------------------------------------

TITLE: Creating Agent Skill Instance (Python)
DESCRIPTION: Shows how to create an instance of the `AgentSkill` class in Python, initializing it with specific values for the echo agent skill. It imports the necessary types and includes a main function to demonstrate the instantiation and printing of the skill object.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/4-agent-skills.md#_snippet_2

LANGUAGE: python
CODE:
```
import google_a2a
from google_a2a.common.types import AgentSkill

def main():
  skill = AgentSkill(
    id="my-project-echo-skill",
    name="Echo Tool",
    description="Echos the input given",
    tags=["echo", "repeater"],
    examples=["I will see this echoed back to me"],
    inputModes=["text"],
    outputModes=["text"],
  )
  print(skill)

if __name__ == "__main__":
  main()
```

----------------------------------------

TITLE: Send Task Message - A2A RPC
DESCRIPTION: Sends a message to initiate or continue a task, returning the final task state synchronously after processing.
SOURCE: https://github.com/google/a2a/blob/main/llms.txt#_snippet_0

LANGUAGE: RPC Definition
CODE:
```
Method: tasks/send
Type: Request/Response
Params: TaskSendParams (id, sessionId, message, pushNotification?, historyLength?, metadata?)
Result: Task (final state)
```

----------------------------------------

TITLE: Defining the Message Interface (TypeScript)
DESCRIPTION: Defines the structure of a Message, used for exchanging content between clients and agents that is not an Artifact. This includes instructions, thoughts, status updates, and errors. Messages have a role (user or agent), multiple parts, and optional metadata.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_3

LANGUAGE: typescript
CODE:
```
interface Message {
  role: "user" | "agent";
  parts: Part[];
  metadata?: Record<string, any>;
}
```

----------------------------------------

TITLE: Sample Agent Card Structure - JSON
DESCRIPTION: Provides a sample JSON structure representing an Agent Card. This object describes an agent's metadata, provider information, version, authentication schemes, supported input/output modes, capabilities (like streaming and push notifications), and a list of skills with examples and output modes.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_6

LANGUAGE: json
CODE:
```
{
  "name": "Google Maps Agent",
  "description": "Plan routes, remember places, and generate directions",
  "url": "https://maps-agent.google.com",
  "provider": {
    "organization": "Google",
    "url": "https://google.com"
  },
  "version": "1.0.0",
  "authentication": {
    "schemes": "OAuth2"
  },
  "defaultInputModes": ["text/plain"],
  "defaultOutputModes": ["text/plain", "application/html"],
  "capabilities": {
    "streaming": true,
    "pushNotifications": false
  },
  "skills": [
    {
      "id": "route-planner",
      "name": "Route planning",
      "description": "Helps plan routing between two locations",
      "tags": ["maps", "routing", "navigation"],
      "examples": [
        "plan my route from Sunnyvale to Mountain View",
        "what's the commute time from Sunnyvale to San Francisco at 9AM",
        "create turn by turn directions from Sunnyvale to Mountain View"
      ],
      "outputModes": ["application/html", "video/mp4"]
    },
    {
      "id": "custom-map",
      "name": "My Map",
      "description": "Manage a custom map with your own saved places",
      "tags": ["custom-map", "saved-places"],
      "examples": [
        "show me my favorite restaurants on the map",
        "create a visual of all places I've visited in the past year"
      ],
      "outputModes": ["application/html"]
    }
  ]
}
```

----------------------------------------

TITLE: Sample Agent Card JSON
DESCRIPTION: Provides a sample JSON structure representing an Agent Card, detailing its name, description, capabilities, and skills.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "Google Maps Agent",
  "description": "Plan routes, remember places, and generate directions",
  "url": "https://maps-agent.google.com",
  "provider": {
    "organization": "Google",
    "url": "https://google.com"
  },
  "version": "1.0.0",
  "authentication": {
    "schemes": "OAuth2"
  },
  "defaultInputModes": [
    "text/plain"
  ],
  "defaultOutputModes": [
    "text/plain",
    "application/html"
  ],
  "capabilities": {
    "streaming": true,
    "pushNotifications": false
  },
  "skills": [
    {
      "id": "route-planner",
      "name": "Route planning",
      "description": "Helps plan routing between two locations",
      "tags": [
        "maps",
        "routing",
        "navigation"
      ],
      "examples": [
        "plan my route from Sunnyvale to Mountain View",
        "what's the commute time from Sunnyvale to San Francisco at 9AM",
        "create turn by turn directions from Sunnyvale to Mountain View"
      ],
      "outputModes": [
        "application/html",
        "video/mp4"
      ]
    },
    {
      "id": "custom-map",
      "name": "My Map",
      "description": "Manage a custom map with your own saved places",
      "tags": [
        "custom-map",
        "saved-places"
      ],
      "examples": [
        "show me my favorite restaurants on the map",
        "create a visual of all places I've visited in the past year"
      ],
      "outputModes": [
        "application/html"
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Define Part Interfaces (TypeScript)
DESCRIPTION: Defines the interfaces for the different types of content that can make up a Message or an Artifact, including TextPart, FilePart, and DataPart. A Part represents a distinct piece of content with its own type and metadata.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/agent-to-agent-communication.md#_snippet_3

LANGUAGE: typescript
CODE:
```
interface TextPart {
  type: "text";
  text: string;
}
interface FilePart {
  type: "file";
  file: {
    name?: string;
    mimeType?: string;
    // oneof {
    bytes?: string; //base64 encoded content
    uri?: string;
    //}
  };
}
interface DataPart {
  type: "data";
  data: Record<string, any>;
}
type Part = (TextPart | FilePart | DataPart) & {
  metadata: Record<string, any>;
};
```

----------------------------------------

TITLE: Client Request: Initiate Streaming Task
DESCRIPTION: Sends a JSON-RPC request to the server to initiate a task that will stream results back. Specifies the task ID and the initial user message.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/details.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 201,
  "method": "tasks/sendSubscribe",
  "params": {
    "id": "task-stream-abc",
    "message": {
      "role": "user",
      "parts": [
        {
          "type": "text",
          "text": "Write a short story about a robot exploring Mars."
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Handle Task Subscription and User Input Python
DESCRIPTION: Handles incoming task subscription requests. It upserts the task, sets up an SSE consumer, and processes the initial message. If the task is not new and the message is 'N', it completes the task. Otherwise, it creates an asynchronous task to stream messages using `_stream_3_messages`. It returns an iterable for SSE events.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/8-agent-capabilities.md#_snippet_4

LANGUAGE: python
CODE:
```
async def on_send_task_subscribe(
    self,
    request: SendTaskStreamingRequest
  ) -> AsyncIterable[SendTaskStreamingResponse] | JSONRPCResponse:
    task_id = request.params.id
    is_new_task = task_id in self.tasks
    # Upsert a task stored by InMemoryTaskManager
    await self.upsert_task(request.params)

    received_text = request.params.message.parts[0].text
    sse_event_queue = await self.setup_sse_consumer(task_id=task_id)
    if not is_new_task and received_text == "N":
      task_update_event = TaskStatusUpdateEvent(
        id=request.params.id,
        status=TaskStatus(
          state=TaskState.COMPLETED,
          message=Message(
            role="agent",
            parts=[
              {
                "type": "text",
                "text": "All done!"
              }
            ]
          )
        ),
        final=True,
      )
      await self.enqueue_events_for_sse(
        request.params.id,
        task_update_event,
      )
    else:
      asyncio.create_task(self._stream_3_messages(request))

    return self.dequeue_events_for_sse(
      request_id=request.id,
      task_id=task_id,
      sse_event_queue=sse_event_queue,
    )
```

----------------------------------------

TITLE: Send File Request JSON
DESCRIPTION: JSON-RPC request to send a file (e.g., PDF) to the agent for analysis. Includes the file content base64-encoded and a text prompt.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_19

LANGUAGE: json
CODE:
```
{
 "jsonrpc": "2.0",
 "id": 9,
 "method": "tasks/send",
 "params": {
 "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
 "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
 "message": {
 "role": "user",
 "parts": [
 {
 "type": "text",
 "text": "Analyze the attached report and generate high level overview"
 },
 {
 "type": "file",
 "file": {
 "mimeType": "application/pdf",
 "data": "<base64-encoded-content>"
 }
 }
 ]
 },
 "metadata": {}
 }
}
```

----------------------------------------

TITLE: Sending Input for Multi-turn Task (Request) - JSON
DESCRIPTION: JSON-RPC request to send the required input back to a task in the `input-required` state. Requires task ID, session ID, and the user's input message.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_13

LANGUAGE: json
CODE:
```
{
 "jsonrpc": "2.0",
 "id": 2,
 "method": "tasks/send",
 "params": {
  "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
  "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
  "message": {
   "role": "user",
   "parts": [
    {
     "type": "text",
     "text": "Android"
    }
   ]
  },
  "metadata": {}
 }
}
```

----------------------------------------

TITLE: Sending Subscribe Request for Task Creation (JSON)
DESCRIPTION: Initiates a new task and subscribes to its updates using the `tasks/sendSubscribe` method. Includes task details, session ID, user message with text and file parts, and metadata.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_15

LANGUAGE: json
CODE:
```
{
 "method": "tasks/sendSubscribe",
 "params": {
  "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
  "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
  "message": {
   "role": "user",
   "parts": [
    {
     "type": "text",
     "text": "write a long paper describing the attached pictures"
    },
    {
     "type": "file",
     "file": {
      "mimeType": "image/png",
      "data": "<base64-encoded-content>"
     }
    }
   ]
  },
  "metadata": {}
 }
}
```

----------------------------------------

TITLE: Get Task Result Request JSON
DESCRIPTION: JSON-RPC request to poll the agent for the result of a previously submitted task, identified by its ID.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_21

LANGUAGE: json
CODE:
```
{
 "jsonrpc": "2.0",
 "id": 10,
 "method": "tasks/get",
 "params": {
 "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
 "metadata": {}
 }
}
```

----------------------------------------

TITLE: Run CLI and Interact with Agent Bash
DESCRIPTION: Demonstrates how to run the A2A CLI tool and interact with the agent running on localhost. It shows the output received from the agent, including streaming messages, the 'input-required' state, and the final 'completed' state after sending 'N'.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/8-agent-capabilities.md#_snippet_5

LANGUAGE: bash
CODE:
```
$ uv run google-a2a-cli --agent http://localhost:10002
=========  starting a new task ========

What do you want to send to the agent? (:q or quit to exit): Streaming?

"status":{"state":"working","message":{"role":"agent","parts":[{"type":"text","text":"Streaming?: one"}]}}
"status":{"state":"working","message":{"role":"agent","parts":[{"type":"text","text":"Streaming?: two"}]}}
"status":{"state":"working","message":{"role":"agent","parts":[{"type":"text","text":"Streaming?: three"}]}}
"status":{"state":"input-required","message":{"role":"agent","parts":[{"type":"text","text":"Would you like more messages? (Y/N)"}]}}

What do you want to send to the agent? (:q or quit to exit): N

"status":{"state":"completed","message":{"role":"agent","parts":[{"type":"text","text":"All done!"}]}}

```

----------------------------------------

TITLE: Receiving Input Required State for Multi-turn Task (Response) - JSON
DESCRIPTION: JSON-RPC response indicating that the task requires further input from the client. Includes the task ID, session ID, and an agent message describing the required input.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_12

LANGUAGE: json
CODE:
```
{
 "jsonrpc": "2.0",
 "id": 1,
 "result": {
  "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
  "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
  "status": {
   "state": "input-required",
   "message": {
    "role": "agent",
    "parts": [
     {
      "type": "text",
      "text": "Select a phone type (iPhone/Android)"
     }
    ]
   }
  },
  "metadata": {}
 }
}
```

----------------------------------------

TITLE: Receiving Completed Task Result with Artifacts (JSON)
DESCRIPTION: A JSON-RPC response indicating that the task has completed and includes the final generated artifacts, such as text analysis results.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_24

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 9,
  "result": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
    "status": {
      "state": "completed"
    },
    "artifacts": [
      {
        "parts": [
          {
            "type": "text",
            "text": "<generated analysis content>"
          }
        ],
        "metadata": {}
      }
    ],
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: Client Request: Provide Input for Multi-Turn Task
DESCRIPTION: Client sends a subsequent JSON-RPC request providing the input requested by the server. Uses the same task ID and session ID (if applicable) but a new request ID.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/details.md#_snippet_8

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 302,
  "method": "tasks/send",
  "params": {
    "id": "task-booking-xyz",
    "sessionId": "session-def-456",
    "message": {
      "role": "user",
      "parts": [{ "type": "text", "text": "To London, tomorrow." }]
    }
  }
}
```

----------------------------------------

TITLE: Configure A2A Agent Capabilities for Streaming (Python)
DESCRIPTION: Updates the agent's capabilities object to declare support for streaming responses. Setting `streaming=True` signals to clients that this agent can handle streaming requests and provide multiple updates over time.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/8-agent-capabilities.md#_snippet_0

LANGUAGE: python
CODE:
```
# ...
def main(host, port):
  # ...
  capabilities = AgentCapabilities(
    streaming=True
  )
  # ...
```

----------------------------------------

TITLE: Task Completed Response JSON
DESCRIPTION: JSON-RPC response indicating that the task is completed. Includes the analysis or result generated by the agent in the artifacts section.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_22

LANGUAGE: json
CODE:
```
{
 "jsonrpc": "2.0",
 "id": 9,
 "result": {
 "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
 "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
 "status": {
 "state": "completed"
 },
 "artifacts": [
 {
 "parts": [
 {
 "type": "text",
 "text": "<generated analysis content>"
 }
 ],
 "metadata": {}
 }
 ],
 "metadata": {}
 }
}
```

----------------------------------------

TITLE: Initializing and Starting A2A Server - Python
DESCRIPTION: Demonstrates how to instantiate and start the `A2AServer` using the custom `MyAgentTaskManager`. This code snippet is intended to be part of the main entry point (`main` function) of the application, binding the task manager and an agent card to the server instance and starting it on a specified host and port.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/6-start-server.md#_snippet_2

LANGUAGE: python
CODE:
```
# ...
from google_a2a.common.server import A2AServer
from my_project.task_manager import MyAgentTaskManager
# ...
def main(host, port):
  # ...

  task_manager = MyAgentTaskManager()
  server = A2AServer(
    agent_card=agent_card,
    task_manager=task_manager,
    host=host,
    port=port,
  )
  server.start()
```

----------------------------------------

TITLE: A2A Streaming Request and Response for Currency Exchange
DESCRIPTION: Example of using the tasks/sendSubscribe method to enable streaming responses, showing real-time status updates during processing and the final result with incremental updates.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/langgraph/README.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 12,
  "method": "tasks/sendSubscribe",
  "params": {
    "id": "131",
    "sessionId": "cebd704d0ddd4e8aa646aeb123d60614",
    "acceptedOutputModes": [
      "text"
    ],
    "message": {
      "role": "user",
      "parts": [
        {
          "type": "text",
          "text": "How much is 100 USD in GBP?"
        }
      ]
    }
  }
}
```

LANGUAGE: json
CODE:
```
data: {"jsonrpc":"2.0","id":12,"result":{"id":"131","status":{"state":"working","message":{"role":"agent","parts":[{"type":"text","text":"Looking up the exchange rates..."}]},"timestamp":"2025-04-02T16:59:34.578939"},"final":false}}

data: {"jsonrpc":"2.0","id":12,"result":{"id":"131","status":{"state":"working","message":{"role":"agent","parts":[{"type":"text","text":"Processing the exchange rates.."}]},"timestamp":"2025-04-02T16:59:34.737052"},"final":false}}

data: {"jsonrpc":"2.0","id":12,"result":{"id":"131","artifact":{"parts":[{"type":"text","text":"Based on the current exchange rate, 1 USD is equivalent to 0.77252 GBP. Therefore, 100 USD would be approximately 77.252 GBP."}],"index":0,"append":false}}}

data: {"jsonrpc":"2.0","id":12,"result":{"id":"131","status":{"state":"completed","timestamp":"2025-04-02T16:59:35.331844"},"final":true}}
```

----------------------------------------

TITLE: Request Structured JSON Output
DESCRIPTION: JSON-RPC request to send a message and specify the desired format (JSON) and schema for the agent's response using metadata.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_23

LANGUAGE: json
CODE:
```
{
 "jsonrpc": "2.0",
 "id": 9,
 "method": "tasks/send",
 "params": {
 "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
 "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
 "message": {
 "role": "user",
 "parts": [
 {
 "type": "text",
 "text": "Show me a list of my open IT tickets",
 "metadata": {
 "mimeType": "application/json",
 "schema": {
 "type": "array",
 "items": {
 "type": "object",
 "properties": {
 "ticketNumber": { "type": "string" },
 "description": { "type": "string" }
 }
 }
 }
 }
 }
 ]
 },
 "metadata": {}
 }
}
```

----------------------------------------

TITLE: Server Response: Input Required Status
DESCRIPTION: Server responds to a task request indicating that more information is needed from the client to proceed. The status state is 'input-required'.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/details.md#_snippet_7

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 301,
  "result": {
    "id": "task-booking-xyz",
    "sessionId": "session-def-456",
    "status": {
      "state": "input-required",
      "timestamp": "2024-10-27T10:10:00Z",
      "message": {
        "role": "agent",
        "parts": [
          {
            "type": "text",
            "text": "Sure, where would you like to fly to and on what date?"
          }
        ],
        "metadata": null
      }
    },
    "artifacts": null,
    "history": null,
    "metadata": null
  }
}
```

----------------------------------------

TITLE: A2A Multi-turn Conversation for Currency Exchange
DESCRIPTION: A sequence of JSON requests and responses demonstrating a multi-turn conversation where the agent requests additional information (target currency) before providing the exchange rate.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/langgraph/README.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 10,
  "method": "tasks/send",
  "params": {
    "id": "130",
    "sessionId": "a9bb617f2cd94bd585da0f88ce2ddba2",
    "acceptedOutputModes": [
      "text"
    ],
    "message": {
      "role": "user",
      "parts": [
        {
          "type": "text",
          "text": "How much is the exchange rate for 1 USD?"
        }
      ]
    }
  }
}
```

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 10,
  "result": {
    "id": "130",
    "status": {
      "state": "input-required",
      "message": {
        "role": "agent",
        "parts": [
          {
            "type": "text",
            "text": "Which currency do you want to convert to? Also, do you want the latest exchange rate or a specific date?"
          }
        ]
      },
      "timestamp": "2025-04-02T16:57:02.336787"
    },
    "history": []
  }
}
```

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 10,
  "method": "tasks/send",
  "params": {
    "id": "130",
    "sessionId": "a9bb617f2cd94bd585da0f88ce2ddba2",
    "acceptedOutputModes": [
      "text"
    ],
    "message": {
      "role": "user",
      "parts": [
        {
          "type": "text",
          "text": "CAD"
        }
      ]
    }
  }
}
```

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 10,
  "result": {
    "id": "130",
    "status": {
      "state": "completed",
      "timestamp": "2025-04-02T16:57:40.033328"
    },
    "artifacts": [
      {
        "parts": [
          {
            "type": "text",
            "text": "The current exchange rate is 1 USD = 1.4328 CAD."
          }
        ],
        "index": 0
      }
    ],
    "history": []
  }
}
```

----------------------------------------

TITLE: Forms - A2A Concept
DESCRIPTION: Mechanism for requesting and submitting structured data using DataPart within Messages/Artifacts.
SOURCE: https://github.com/google/a2a/blob/main/llms.txt#_snippet_25

LANGUAGE: Concept Description
CODE:
```
Concept: Forms
Description: Structured data requested/submitted using DataPart within Messages/Artifacts (demonstrated in ADK sample).
```

----------------------------------------

TITLE: Get Task Response JSON
DESCRIPTION: Sample JSON RPC response containing the artifacts and requested history for a specific task.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_4

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
    "status": {
      "state": "completed"
    },
    "artifacts": [
      {
        "parts": [
          {
            "type": "text",
            "text": "Why did the chicken cross the road? To get to the other side!"
          }
        ]
      }
    ],
    "history": [
      {
        "role": "user",
        "parts": [
          {\n            "type": "text",
            "text": "tell me a joke"
          }
        ]
      }
    ],
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: Run Semantic Kernel Agent (Default Port) (Bash)
DESCRIPTION: Starts the Semantic Kernel agent server using `uv run`. It runs the application defined in the current directory (`.`) on the default port (10020).
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/semantickernel/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
uv run .
```

----------------------------------------

TITLE: Implementing A2A Server with Task Handler in TypeScript
DESCRIPTION: Demonstrates the setup of an A2A server with a custom task handler implementation. Shows how to handle task lifecycle, yield updates, manage cancellation, and produce artifacts. Uses async generator pattern for progressive task updates.
SOURCE: https://github.com/google/a2a/blob/main/samples/js/src/server/README.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import {
  A2AServer,
  InMemoryTaskStore,
  TaskContext,
  TaskYieldUpdate,
} from "./index"; // Assuming imports from the server package

// 1. Define your agent's logic as a TaskHandler
async function* myAgentLogic(
  context: TaskContext
): AsyncGenerator<TaskYieldUpdate> {
  console.log(`Handling task: ${context.task.id}`);
  yield {
    state: "working",
    message: { role: "agent", parts: [{ text: "Processing..." }] },
  };

  // Simulate work...
  await new Promise((resolve) => setTimeout(resolve, 1000));

  if (context.isCancelled()) {
    console.log("Task cancelled!");
    yield { state: "canceled" };
    return;
  }

  // Yield an artifact
  yield {
    name: "result.txt",
    mimeType: "text/plain",
    parts: [{ text: `Task ${context.task.id} completed.` }],
  };

  // Yield final status
  yield {
    state: "completed",
    message: { role: "agent", parts: [{ text: "Done!" }] },
  };
}

// 2. Create and start the server
const store = new InMemoryTaskStore(); // Or new FileStore()
const server = new A2AServer(myAgentLogic, { taskStore: store });

server.start(); // Starts listening on default port 41241

console.log("A2A Server started.");
```

----------------------------------------

TITLE: Creating Agent Card (Python)
DESCRIPTION: Continues the main function by initializing an 'AgentCapabilities' object and then creating an 'AgentCard'. The Agent Card includes the agent's name, description, URL, version, default input/output modes, capabilities, and the previously defined skill.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/5-add-agent-card.md#_snippet_2

LANGUAGE: python
CODE:
```
# ...
def main(host, port):
  # ...
  capabilities = AgentCapabilities()
  agent_card = AgentCard(
    name="Echo Agent",
    description="This agent echos the input given",
    url=f"http://{host}:{port}/",
    version="0.1.0",
    defaultInputModes=["text"],
    defaultOutputModes=["text"],
    capabilities=capabilities,
    skills=[skill]
  )
  logging.info(agent_card)

if __name__ == "__main__":
  main()
```

----------------------------------------

TITLE: Sending Multi-turn Follow-up A2A Task Request (HTTP/JSON)
DESCRIPTION: Illustrates sending a subsequent message within an established session (`sessionId`) for a multi-turn conversation. This request sends only a new text message, relying on the provided session ID for the API to maintain the conversational context from previous turns, including the initial file upload.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/llama_index_file_chat/README.md#_snippet_7

LANGUAGE: HTTP/JSON
CODE:
```
POST http://localhost:10010
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 11,
  "method": "tasks/send",
  "params": {
    "id": "130",
    "sessionId": "8f01f3d172cd4396a0e535ae8aec6687",
    "acceptedOutputModes": [
      "text"
    ],
    "message": {
      "role": "user",
      "parts": [
        {
          "type": "text",
          "text": "What about thing X?"
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Synchronous A2A Task Response (JSON)
DESCRIPTION: Shows the structure of a synchronous JSON-RPC response for a completed A2A task. It indicates the task's completion status, timestamp, and includes an array of artifacts. The primary artifact contains the text output with inline citations and a metadata object providing the full source text for those citations.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/llama_index_file_chat/README.md#_snippet_6

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 11,
  "result": {
    "id": "129",
    "status": {
      "state": "completed",
      "timestamp": "2025-04-02T16:53:29.301828"
    },
    "artifacts": [
      {
        "parts": [
          {
            "type": "text",
            "text": "This file is about XYZ... [1]"
          }
        ],
        "metadata": {
            "1": ["Text for citation 1"]
        }
        "index": 0,
      }
    ],
  }
}
```

----------------------------------------

TITLE: Example A2A Synchronous Response (JSON)
DESCRIPTION: A JSON-RPC response body from the A2A agent for a synchronous task. It shows the task status ("completed"), the result artifact (the currency conversion), and an empty history.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/semantickernel/README.md#_snippet_10

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 33,
  "result": {
    "id": "3",
    "status": {
      "state": "completed",
      "timestamp": "2025-04-01T16:53:29.301828"
    },
    "artifacts": [
      {
        "parts": [
          {
            "type": "text",
            "text": "1 USD is approximately 0.88137 EUR."
          }
        ],
        "index": 0
      }
    ],
    "history": []
  }
}
```

----------------------------------------

TITLE: Send Message via A2A CLI (Bash)
DESCRIPTION: Demonstrates sending a simple text message ('Hello!') to the A2A agent through the command-line interface.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/7-interact-with-server.md#_snippet_2

LANGUAGE: bash
CODE:
```
=========  starting a new task ========

What do you want to send to the agent? (:q or quit to exit): Hello!
```

----------------------------------------

TITLE: Server Response: Streaming Task Artifact Chunk (SSE)
DESCRIPTION: An SSE event from the server containing a chunk of an artifact generated by the task. Includes artifact name, content, index, and append flag.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/details.md#_snippet_4

LANGUAGE: sse
CODE:
```
id: 201-2
data: {"jsonrpc":"2.0","id":201,"result":{"id":"task-stream-abc","artifact":{"name":"story_chunk_1","description":null,"parts":[{"type":"text","text":"Unit 734 rolled across the red dust. ","metadata":null}],"index":0,"append":false,"lastChunk":false,"metadata":null},"metadata":null}}
```

LANGUAGE: sse
CODE:
```
id: 201-3
data: {"jsonrpc":"2.0","id":201,"result":{"id":"task-stream-abc","artifact":{"name":"story_chunk_2","description":null,"parts":[{"type":"text","text":"Olympus Mons loomed in the distance...","metadata":null}],"index":0,"append":true,"lastChunk":false,"metadata":null},"metadata":null}}
```

LANGUAGE: sse
CODE:
```
id: 201-4
data: {"jsonrpc":"2.0","id":201,"result":{"id":"task-stream-abc","artifact":{"name":"story_chunk_3","description":null,"parts":[{"type":"text","text":" a lonely vigil.","metadata":null}],"index":0,"append":true,"lastChunk":true,"metadata":null},"metadata":null}}
```

----------------------------------------

TITLE: Defining ContactInfo data structure in Python
DESCRIPTION: Python code defining the ContactInfo class using Pydantic BaseModel. It specifies the structure of the extracted contact information, including name, email, phone, organization, and role fields.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/marvin/README.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
class ContactInfo(BaseModel):
    name: str = Field(description="Person's first and last name")
    email: EmailStr
    phone: str = Field(description="standardized phone number")
    organization: str | None = Field(None, description="org if mentioned")
    role: str | None = Field(None, description="title or role if mentioned")
```

----------------------------------------

TITLE: Receiving Final Task Artifact Chunk via SSE (JSON)
DESCRIPTION: An example of a Server-Sent Event (SSE) data payload containing the final chunk of a task artifact. The `lastChunk` flag indicates the end of the artifact stream.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_19

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "artifact": {
      "parts": [
        {"type":"text", "text": "<section 3...>"}
      ],
      "index": 0,
      "append": true,
      "lastChunk": true
    }
  }
}
```

----------------------------------------

TITLE: Setting Up and Running Movie Info Agent with TMDB and Gemini APIs
DESCRIPTION: This snippet demonstrates how to set up the required API keys as environment variables and start the Movie Info Agent. It requires a TMDB API key and a Gemini API key. The agent will be accessible at http://localhost:41241 after starting.
SOURCE: https://github.com/google/a2a/blob/main/samples/js/src/agents/movie-agent/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
export TMDB_API_KEY=<api_key> # see https://developer.themoviedb.org/docs/getting-started
export GEMINI_API_KEY=<api_key>
npm run agents:movie-agent
```

----------------------------------------

TITLE: Streaming A2A Task Response Events (JSON)
DESCRIPTION: Illustrates the event-based nature of a streaming A2A task response, where multiple JSON-RPC events are sent over the stream. These events provide real-time status updates (e.g., 'working', 'completed') and incrementally deliver artifacts, including the final text response with complete citation metadata.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/llama_index_file_chat/README.md#_snippet_9

LANGUAGE: JSON
CODE:
```
{"jsonrpc":"2.0","id":"367d0ba9af97457890261ac29a0f6f5b","result":{"id":"373b26d64c5a4f0099fa906c6b7342d9","status":{"state":"working","message":{"role":"agent","parts":[{"type":"text","text":"Parsing document..."}]},"timestamp":"2025-04-15T16:05:18.283682"},"final":false}}
```

LANGUAGE: JSON
CODE:
```
{"jsonrpc":"2.0","id":"367d0ba9af97457890261ac29a0f6f5b","result":{"id":"373b26d64c5a4f0099fa906c6b7342d9","artifact":{"parts":[{"type":"text","text":"This file discusses the Transformer, a novel neural network architecture based solely on attention mechanisms, dispensing with recurrence and convolutions entirely [1]. The document compares the Transformer to recurrent and convolutional layers [2], details the model architecture [3], and presents results from machine translation and English constituency parsing tasks [4]."}],"metadata":{"1":["The dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and a decoder. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train. Our model achieves 28.4 BLEU on the WMT 2014 English-to-German translation task, improving over the existing best results, including ensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.8 after training for 3.5 days on eight GPUs, a small fraction of the training costs of the best models from the literature. We show that the Transformer generalizes well to other tasks by applying it successfully to English constituency parsing both with large and limited training data."],"2":["In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x1, ..., xn) to another sequence of equal length (z1, ..., zn), with xi, zi ∈ Rd, such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata.",""],"3":["# 3 Model Architecture"],"4":["# 6   Results"]},"index":0,"append":false}}}
```

LANGUAGE: JSON
CODE:
```
{"jsonrpc":"2.0","id":"367d0ba9af97457890261ac29a0f6f5b","result":{"id":"373b26d64c5a4f0099fa906c6b7342d9","status":{"state":"completed","timestamp":"2025-04-15T16:05:26.111314"},"final":true}}
```

----------------------------------------

TITLE: Sending Initial Message for Multi-turn Task (Request) - JSON
DESCRIPTION: JSON-RPC request to send the initial user message to a task to start a multi-turn conversation. Requires task ID and the user message content.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_11

LANGUAGE: json
CODE:
```
{
 "jsonrpc": "2.0",
 "id": 1,
 "method": "tasks/send",
 "params": {
  "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
  "message": {
   "role": "user",
   "parts": [
    {
     "type": "text",
     "text": "request a new phone for me"
    }
   ]
  },
  "metadata": {}
 }
}
```

----------------------------------------

TITLE: Receiving Task Update via SSE (JSON)
DESCRIPTION: An example of a Server-Sent Event (SSE) data payload containing a partial task artifact update. This is part of a stream received after resubscribing.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_18

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "artifact": {
      "parts": [
        {"type":"text", "text": "<section 2...>"}
      ],
      "index": 0,
      "append": true,
      "lastChunk":false
    }
  }
}
```

----------------------------------------

TITLE: Running the A2A CLI Client with UV
DESCRIPTION: Command to run the A2A CLI client using UV, specifying the URL of the A2A server with the --agent flag. Additional command line options are available in the source code.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/hosts/cli/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
uv run . --agent [url-of-your-a2a-server]
```

----------------------------------------

TITLE: Send A2A Task Request (JSON)
DESCRIPTION: This JSON object represents a client sending a `tasks/send` request to the server to initiate a new task. It includes the JSON-RPC version, a request ID, the method name, and parameters specifying the task ID and the initial message content.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/details.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 101,
  "method": "tasks/send",
  "params": {
    "id": "task-uuid-12345",
    "message": {
      "role": "user",
      "parts": [
        { "type": "text", "text": "What is the capital of France?" }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Defining ErrorMessage Interface (TypeScript)
DESCRIPTION: Defines the structure for error messages returned by the server. It includes a numeric `code`, a descriptive `message`, and an optional `data` field for additional context.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_27

LANGUAGE: typescript
CODE:
```
interface ErrorMessage {
  code: number;
  message: string;
  data?: any;
}
```

----------------------------------------

TITLE: Send Task Request with Push Notification Config - JSON
DESCRIPTION: Example JSON request payload for sending a task message while simultaneously providing the push notification configuration.
SOURCE: https://github.com/google/a2a/blob/main/docs/topics/push-notifications.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method":"tasks/send",
  "params": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",    
    "message": {
      "role":"user",
      "parts": [{
        "type":"text",
        "text": "tell me a joke"
      }]
    },
    "pushNotification": {
      "url": "https://example.com/callback",
      "authentication": {
        "schemes": ["bearer"]
      }
    },
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: Retrieving A2A Task Status/Result (JSON)
DESCRIPTION: JSON request body used by the client to retrieve the full details of a specific task using the `tasks/get` method, typically after being notified of its completion via a webhook.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/details.md#_snippet_13

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 402,
  "method": "tasks/get",
  "params": { "id": "task-report-gen-777" }
}
```

----------------------------------------

TITLE: A2A Server Task Completion Response (JSON)
DESCRIPTION: This JSON object shows a server's successful response to a `tasks/send` request for a task that completed synchronously. It includes the JSON-RPC version, the original request ID, and the `result` containing the final `Task` object with its ID, session ID, completed status, and the generated artifacts (the response message).
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/details.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 101,
  "result": {
    "id": "task-uuid-12345",
    "sessionId": "session-uuid-67890",
    "status": {
      "state": "completed",
      "timestamp": "2024-10-27T10:00:05Z"
    },
    "artifacts": [
      {
        "index": 0,
        "parts": [
          { "type": "text", "text": "The capital of France is Paris." }
        ]
      }
    ],
    "history": null,
    "metadata": null
  }
}
```

----------------------------------------

TITLE: Example A2A Synchronous Request (JSON)
DESCRIPTION: A JSON-RPC request body for sending a synchronous task (`tasks/send`) to the A2A agent. It includes a user message asking for a currency conversion.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/semantickernel/README.md#_snippet_9

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 33,
  "method": "tasks/send",
  "params": {
    "id": "3",
    "sessionId": "1aab49f1e85c499da48c2124f4ceee4d",
    "acceptedOutputModes": ["text"],
    "message": {
      "role": "user",
      "parts": [
        { "type": "text", "text": "How much is 1 USD to EUR?" }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Get Task State - A2A RPC
DESCRIPTION: Retrieves the current state of a specific task.
SOURCE: https://github.com/google/a2a/blob/main/llms.txt#_snippet_2

LANGUAGE: RPC Definition
CODE:
```
Method: tasks/get
Type: Request/Response
Params: TaskQueryParams (id, historyLength?)
Result: Task
```

----------------------------------------

TITLE: Running A2A Server with Ollama (Bash)
DESCRIPTION: Command to start the A2A server using `uv run`, passing the Ollama host and model name as command-line arguments to configure the server's AI capabilities.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/9-ollama-agent.md#_snippet_6

LANGUAGE: bash
CODE:
```
uv run my-project --ollama-host http://127.0.0.1:11434 --ollama-model qwq
```

----------------------------------------

TITLE: Receiving Task Updates via SSE Stream (JSON)
DESCRIPTION: Illustrates the Server-Sent Events (SSE) stream format for receiving task status and artifact updates. Shows initial status, artifact chunks (appending), and final completion status.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_16

LANGUAGE: json
CODE:
```
data: {
 "jsonrpc": "2.0",
 "id": 1,
 "result": {
  "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
  "status": {
   "state": "working",
   "timestamp":"2025-04-02T16:59:25.331844"
  },
  "final": false
 }
}

data: {
 "jsonrpc": "2.0",
 "id": 1,
 "result": {
  "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
  "artifact": {
   "parts": [
    {"type":"text", "text": "<section 1...>"}
   ],
   "index": 0,
   "append": false,
   "lastChunk": false
  }
 }
}

data: {
 "jsonrpc": "2.0",
 "id": 1,
 "result": {
  "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
  "artifact": {
   "parts": [
    {"type":"text", "text": "<section 2...>"}
   ],
   "index": 0,
   "append": true,
   "lastChunk": false
  }
 }
}

data: {
 "jsonrpc": "2.0",
 "id": 1,
 "result": {
  "id": 1,
  "artifact": {
   "parts": [
    {"type":"text", "text": "<section 3...>"}
   ],
   "index": 0,
   "append": true,
   "lastChunk": true
  }
 }
}

data: {
 "jsonrpc": "2.0",
 "id": 1,
 "result": {
  "id": 1,
  "status": {
   "state": "completed",
   "timestamp":"2025-04-02T16:59:35.331844"
  },
  "final": true
 }
}

```

----------------------------------------

TITLE: Stream Messages and Request Input Python
DESCRIPTION: Asynchronously streams a predefined number of messages to the client. After streaming, it updates the task status to 'input-required' and sends a message asking the user if they want more messages. This method is called internally by `on_send_task_subscribe`.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/8-agent-capabilities.md#_snippet_3

LANGUAGE: python
CODE:
```
async def _stream_3_messages(self, request: SendTaskStreamingRequest):
    # ...
    async for message in messages:
      # ...
      # is_last = message == messages[-1] # Delete this line
      task_state = TaskState.WORKING
      # ...
      task_update_event = TaskStatusUpdateEvent(
        id=request.params.id,
        status=task_status,
        final=False,
      )
      # ...

    ask_message = Message(
      role="agent",
      parts=[
        {
          "type": "text",
          "text": "Would you like more messages? (Y/N)"
        }
      ]
    )
    task_update_event = TaskStatusUpdateEvent(
      id=request.params.id,
      status=TaskStatus(
        state=TaskState.INPUT_REQUIRED,
        message=ask_message
      ),
      final=True,
    )
    await self.enqueue_events_for_sse(
      request.params.id,
      task_update_event
    )
```

----------------------------------------

TITLE: Receiving Final Task Status via SSE (JSON)
DESCRIPTION: An example of a Server-Sent Event (SSE) data payload indicating the final status of a task (e.g., 'completed'). The `final` flag indicates the end of the overall task updates.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_20

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "status": {
      "state": "completed",
      "timestamp":"2025-04-02T16:59:35.331844"
    },
    "final": true
  }
}
```

----------------------------------------

TITLE: Sending Message with File Attachment (JSON)
DESCRIPTION: Sends a JSON-RPC request to the agent containing a user message and a file attachment. The file content is base64-encoded within the `data` field.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_21

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 9,
  "method": "tasks/send",
  "params": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
    "message": {
      "role": "user",
      "parts": [
        {
          "type": "text",
          "text": "Analyze the attached report and generate high level overview"
        },
        {
          "type": "file",
          "file": {
            "mimeType": "application/pdf",
            "data": "<base64-encoded-content>"
          }
        }
      ]
    },
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: Server Response: Streaming Task Completion (SSE)
DESCRIPTION: An SSE event from the server indicating the task has completed. The 'final' flag is true.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/details.md#_snippet_5

LANGUAGE: sse
CODE:
```
id: 201-5
data: {"jsonrpc":"2.0","id":201,"result":{"id":"task-stream-abc","status":{"state":"completed","message":null,"timestamp":"2024-10-27T10:05:05Z"},"final":true,"metadata":null}}
```

----------------------------------------

TITLE: Defining Example Agent Skill Structure (TypeScript)
DESCRIPTION: Provides an example object literal demonstrating the structure and typical values for defining an Agent Skill within the system. This structure is used to describe the capabilities of an agent.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/4-agent-skills.md#_snippet_0

LANGUAGE: ts
CODE:
```
{
  id: "my-project-echo-skill"
  name: "Echo Tool",
  description: "Echos the input given",
  tags: ["echo", "repeater"],
  examples: ["I will see this echoed back to me"],
  inputModes: ["text"],
  outputModes: ["text"]
}
```

----------------------------------------

TITLE: Receiving Resubscribed Task Updates via SSE Stream (JSON)
DESCRIPTION: Shows the SSE stream format for receiving updates after resubscribing to a task. Includes subsequent artifact chunks and the final completion status.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_18

LANGUAGE: json
CODE:
```
data: {
 "jsonrpc": "2.0",
 "id": 1,
 "result": {
  "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
  "artifact": {
   "parts": [
    {"type":"text", "text": "<section 2...>"}
   ],
   "index": 0,
   "append": true,
   "lastChunk":false
  }
 }
}

data: {
 "jsonrpc": "2.0",
 "id": 1,
 "result": {
  "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
  "artifact": {
   "parts": [
    {"type":"text", "text": "<section 3...>"}
   ],
   "index": 0,
   "append": true,
   "lastChunk": true
  }
 }
}

data: {
 "jsonrpc": "2.0",
 "id": 1,
 "result": {
  "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
  "status": {
   "state": "completed",
   "timestamp":"2025-04-02T16:59:35.331844"
  },
  "final": true
 }
}

```

----------------------------------------

TITLE: Sending Initial A2A Task Request (HTTP/JSON)
DESCRIPTION: Demonstrates the structure of a synchronous JSON-RPC POST request to initiate an A2A task. It sends an initial message containing both plain text and a binary file (`attention.pdf`), specifying the task method (`tasks/send`), a session ID for conversation context, and accepted output modes.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/llama_index_file_chat/README.md#_snippet_5

LANGUAGE: HTTP/JSON
CODE:
```
POST http://localhost:10010
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 11,
  "method": "tasks/send",
  "params": {
    "id": "129",
    "sessionId": "8f01f3d172cd4396a0e535ae8aec6687",
    "acceptedOutputModes": [
      "text"
    ],
    "message": {
      "role": "user",
      "parts": [
        {
          "type": "text",
          "text": "What does this file talk about?"
        },
        {
            "type": "file",
            "file": {
                "bytes": "...",
                "name": "attention.pdf"
            }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Send Task Response JSON
DESCRIPTION: Sample JSON RPC response received after successfully sending a task to an agent, including task status and artifacts.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
    "status": {
      "state": "completed"
    },
    "artifacts": [
      {
        "name": "joke",
        "parts": [
          {
            "type": "text",
            "text": "Why did the chicken cross the road? To get to the other side!"
          }
        ]
      }
    ],
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: File Send Acknowledgment Response JSON
DESCRIPTION: JSON-RPC response from the agent acknowledging receipt of the file and indicating that processing is in progress.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_20

LANGUAGE: json
CODE:
```
{
 "jsonrpc": "2.0",
 "id": 9,
 "result": {
 "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
 "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
 "status": {
 "state": "working",
 "message": {
 "role": "agent",
 "parts": [
 {
 "type": "text",
 "text": "analysis in progress, please wait"
 }
 ],
 "metadata": {}
 }
 },
 "metadata": {}
 }
}
```

----------------------------------------

TITLE: Running the A2A client CLI in Bash
DESCRIPTION: Commands for running an A2A client, specifically the sample CLI, to interact with the Marvin agent server. It assumes the Python environment is already active.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/marvin/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
# Ensure the environment is active (source .venv/bin/activate)
cd samples/python/hosts/cli
uv run . --agent http://localhost:10030 # Use the correct agent URL/port
```

----------------------------------------

TITLE: Sample Send Task Response - JSON
DESCRIPTION: Presents the JSON-RPC response payload received after sending a task to an agent. It includes the JSON-RPC version, request ID, and the result object containing the task ID, session ID, current status (e.g., "completed"), a list of artifacts produced by the task, and optional metadata.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_8

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
    "status": {
      "state": "completed"
    },
    "artifacts": [
      {
        "name": "joke",
        "parts": [
          {
            "type": "text",
            "text": "Why did the chicken cross the road? To get to the other side!"
          }
        ]
      }
    ],
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: Defining Part Interfaces and Type (TypeScript)
DESCRIPTION: Defines the different types of content parts (TextPart, FilePart, DataPart) that can compose Messages or Artifacts. It specifies the unique properties for each type and defines the union type 'Part' which includes a common metadata property.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_4

LANGUAGE: typescript
CODE:
```
interface TextPart {
  type: "text";
  text: string;
}
interface FilePart {
  type: "file";
  file: {
    name?: string;
    mimeType?: string;
    // oneof {
    bytes?: string; //base64 encoded content
    uri?: string;
    //}
  };
}
interface DataPart {
  type: "data";
  data: Record<string, any>;
}
type Part = (TextPart | FilePart | DataPart) & {
  metadata: Record<string, any>;
};
```

----------------------------------------

TITLE: Cancel Task - A2A RPC
DESCRIPTION: Requests the cancellation of a running task.
SOURCE: https://github.com/google/a2a/blob/main/llms.txt#_snippet_3

LANGUAGE: RPC Definition
CODE:
```
Method: tasks/cancel
Type: Request/Response
Params: TaskIdParams (id)
Result: Task (updated state, likely 'canceled') or error
```

----------------------------------------

TITLE: A2A Task Submission Acknowledgment (JSON)
DESCRIPTION: JSON response body returned by the server to acknowledge the successful submission of a task initiated by the client. Indicates the task ID and its initial state (e.g., "submitted" or "working").
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/details.md#_snippet_11

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 401,
  "result": {
    "id": "task-report-gen-777",
    "status": { "state": "submitted", "timestamp": "2024-10-27T11:00:00Z" }
  }
}
```

----------------------------------------

TITLE: Define Message Interface (TypeScript)
DESCRIPTION: Defines the interface for a Message, used to exchange non-Artifact content such as user requests, agent thoughts, instructions, errors, or status updates. Messages have a role (user or agent) and consist of multiple parts.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/agent-to-agent-communication.md#_snippet_2

LANGUAGE: typescript
CODE:
```
interface Message {
  role: "user" | "agent";
  parts: Part[];
  metadata?: Record<string, any>;
}
```

----------------------------------------

TITLE: Communication - A2A Concept
DESCRIPTION: Explains the structure of messages and artifacts used for communication, composed of parts.
SOURCE: https://github.com/google/a2a/blob/main/llms.txt#_snippet_21

LANGUAGE: Concept Description
CODE:
```
Concept: Communication
Description: Uses Message objects with Parts (text, file, data) for input; Task outputs are Artifacts with Parts.
```

----------------------------------------

TITLE: Server Response: Streaming Task Status Update (SSE)
DESCRIPTION: An SSE event from the server indicating the task's current status (e.g., 'working'). Part of the streaming response to a tasks/sendSubscribe request.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/details.md#_snippet_3

LANGUAGE: sse
CODE:
```
id: 201-1
data: {"jsonrpc":"2.0","id":201,"result":{"id":"task-stream-abc","status":{"state":"working","message":{"role":"agent","parts":[{"type":"text","text":"Okay, drafting a story..."}],"metadata":null},"timestamp":"2024-10-27T10:05:01Z"},"final":false,"metadata":null}}
```

----------------------------------------

TITLE: Running A2A Server with Uvicorn - Bash
DESCRIPTION: Provides the command-line instruction to start the A2A server using the `uv` runner (likely associated with uvicorn). This command assumes the project is configured correctly to be run via `uv run`.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/6-start-server.md#_snippet_3

LANGUAGE: bash
CODE:
```
uv run my-project
```

----------------------------------------

TITLE: Canceling a Task in JSON-RPC
DESCRIPTION: This JSON-RPC request payload is used by a client to request the cancellation of a previously submitted Task, identified by its unique ID.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_11

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "tasks/cancel",
  "params": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: Set Task Push Notification Config - A2A RPC
DESCRIPTION: Configures or updates the push notification settings for a task.
SOURCE: https://github.com/google/a2a/blob/main/llms.txt#_snippet_4

LANGUAGE: RPC Definition
CODE:
```
Method: tasks/pushNotification/set
Type: Request/Response
Params: TaskPushNotificationConfig
Result: TaskPushNotificationConfig (confirmed config)
```

----------------------------------------

TITLE: Receiving Task Working Status (JSON)
DESCRIPTION: A JSON-RPC response indicating that the agent has received the message and is currently processing the task. Includes the task and session IDs and a status message.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_22

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 9,
  "result": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
    "status": {
      "state": "working",
      "message": {
        "role": "agent",
        "parts": [
          {
            "type": "text",
            "text": "analysis in progress, please wait"
          }
        ],
        "metadata": {}
      }
    },
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: Push Notification Configuration Structure Definition
DESCRIPTION: Defines the structure for push notification configuration, including URL, optional token, and authentication details.
SOURCE: https://github.com/google/a2a/blob/main/docs/topics/push-notifications.md#_snippet_1

LANGUAGE: Structure Definition
CODE:
```
interface PushNotificationConfig {
  url: string;
  token?: string; // token unique to this task/session
  authentication?: {
    schemes: string[];
    credentials?: string;
  }
}
```

----------------------------------------

TITLE: Task Push Notification Configuration Structure Definition
DESCRIPTION: Defines the structure linking a task ID to its push notification configuration.
SOURCE: https://github.com/google/a2a/blob/main/docs/topics/push-notifications.md#_snippet_2

LANGUAGE: Structure Definition
CODE:
```
interface TaskPushNotificationConfig {
  id: string; //task id
  pushNotificationConfig: PushNotificationConfig;
}
```

----------------------------------------

TITLE: Initiating A2A Task with Push Notification (JSON)
DESCRIPTION: JSON request body used by a client to initiate a long-running task via the `tasks/send` method and configure a webhook URL for push notifications upon completion. Includes task details, message content, and webhook authentication information.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/details.md#_snippet_10

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 401,
  "method": "tasks/send",
  "params": {
    "id": "task-report-gen-777",
    "message": {
      "role": "user",
      "parts": [
        {
          "type": "text",
          "text": "Generate the quarterly sales report. It might take a while, notify my webhook when done."
        }
      ]
    },
    "pushNotification": {
      "url": "https://example.com/webhooks/a2a/task_updates",
      "token": "opaque-client-token-for-task-777",
      "authentication": {
        "schemes": ["Bearer"],
        "credentials": null
      }
    }
  }
}
```

----------------------------------------

TITLE: Activate Virtual Environment (Bash)
DESCRIPTION: Activate the virtual environment in the current terminal session by sourcing the activation script. This command must be run in each new terminal window used for the project.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/3-create-project.md#_snippet_2

LANGUAGE: bash
CODE:
```
source .venv/bin/activate
```

----------------------------------------

TITLE: Running the Agent Application (Bash)
DESCRIPTION: Executes the Python application using the 'uv run' command, assuming the project is named 'my-project'. This starts the application which will likely print the created Agent Card.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/5-add-agent-card.md#_snippet_3

LANGUAGE: bash
CODE:
```
uv run my-project
```

----------------------------------------

TITLE: Authentication - A2A Concept
DESCRIPTION: Describes how authentication is defined for agents and push notifications, supporting various schemes.
SOURCE: https://github.com/google/a2a/blob/main/llms.txt#_snippet_24

LANGUAGE: Concept Description
CODE:
```
Concept: Authentication
Description: Defined in AgentCard and PushNotificationConfig; supports schemes like API keys, OAuth, JWT (samples use JWT for push notifications).
```

----------------------------------------

TITLE: A2A Synchronous Request for Currency Exchange Rate
DESCRIPTION: Example JSON request and response for a synchronous query to convert USD to INR using the A2A protocol's tasks/send method, demonstrating a complete single-turn interaction.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/langgraph/README.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 11,
  "method": "tasks/send",
  "params": {
    "id": "129",
    "sessionId": "8f01f3d172cd4396a0e535ae8aec6687",
    "acceptedOutputModes": [
      "text"
    ],
    "message": {
      "role": "user",
      "parts": [
        {
          "type": "text",
          "text": "How much is the exchange rate for 1 USD to INR?"
        }
      ]
    }
  }
}
```

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 11,
  "result": {
    "id": "129",
    "status": {
      "state": "completed",
      "timestamp": "2025-04-02T16:53:29.301828"
    },
    "artifacts": [
      {
        "parts": [
          {
            "type": "text",
            "text": "The exchange rate for 1 USD to INR is 85.49."
          }
        ],
        "index": 0
      }
    ],
    "history": []
  }
}
```

----------------------------------------

TITLE: Running A2A CLI to Interact with Server (Bash)
DESCRIPTION: Command to start the A2A command-line interface, connecting to the running A2A server instance. Allows sending tasks to the server.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/9-ollama-agent.md#_snippet_7

LANGUAGE: bash
CODE:
```
uv run google-a2a-cli --agent http://localhost:10002
```

----------------------------------------

TITLE: Provide Structured JSON Output Response
DESCRIPTION: JSON-RPC response from the agent providing the requested structured output. The JSON data is included as a string within a text part.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_24

LANGUAGE: json
CODE:
```
{
 "jsonrpc": "2.0",
 "id": 9,
 "result": {
 "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
 "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
 "status": {
 "state": "completed",
 "timestamp": "2025-04-17T17:47:09.680794"
 },
 "artifacts": [
 {
 "parts": [
 {
 "type": "text",
 "text": "[{\"ticketNumber\":\"REQ12312\",\"description\":\"request for VPN access\"},{\"ticketNumber\":\"REQ23422\",\"description\":\"Add to DL - team-gcp-onboarding\"}]"
 }
 ],
 "index": 0
 }
 ]
 }
}
```

----------------------------------------

TITLE: Task Status Update Event - A2A Streaming
DESCRIPTION: Event signaling a change in a task's status during streaming updates.
SOURCE: https://github.com/google/a2a/blob/main/llms.txt#_snippet_7

LANGUAGE: Event Definition
CODE:
```
Event: TaskStatusUpdateEvent
Properties:
- id: string (Task ID)
- status: TaskStatus (New status object)
- final: boolean (True if terminal update)
- metadata: object | null (Event metadata)
```

----------------------------------------

TITLE: Client Request: Initiate Multi-Turn Task
DESCRIPTION: Sends an initial JSON-RPC request to start a task that may require further input. Uses the tasks/send method.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/details.md#_snippet_6

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 301,
  "method": "tasks/send",
  "params": {
    "id": "task-booking-xyz",
    "message": {
      "role": "user",
      "parts": [{ "type": "text", "text": "Book a flight for me." }]
    }
  }
}
```

----------------------------------------

TITLE: Creating and Running Ollama Agent (Python)
DESCRIPTION: Defines two core functions for Ollama integration: `create_ollama_agent` initializes a `ChatOllama` model and a `react` agent, and `run_ollama` asynchronously invokes the agent with a prompt and extracts the final response.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/9-ollama-agent.md#_snippet_4

LANGUAGE: python
CODE:
```
from langchain_ollama import ChatOllama
from langgraph.prebuilt import create_react_agent
from langgraph.graph.graph import CompiledGraph

def create_ollama_agent(ollama_base_url: str, ollama_model: str):
  ollama_chat_llm = ChatOllama(
    base_url=ollama_base_url,
    model=ollama_model,
    temperature=0.2
  )
  agent = create_react_agent(ollama_chat_llm, tools=[])
  return agent

async def run_ollama(ollama_agent: CompiledGraph, prompt: str):
  agent_response = await ollama_agent.ainvoke(
    {"messages": prompt }
  )
  message = agent_response["messages"][-1].content
  return str(message)
```

----------------------------------------

TITLE: Agent URL Validation Challenge - HTTP
DESCRIPTION: Example HTTP GET request and expected response demonstrating how an agent can validate a client-provided push notification URL using a challenge token.
SOURCE: https://github.com/google/a2a/blob/main/docs/topics/push-notifications.md#_snippet_7

LANGUAGE: HTTP
CODE:
```
GET https://abc.com/callback-path?validationToken=randomString
Content-Length: 0

HTTP/1.1 200 OK
Content-Type: text/plain

randomString
```

----------------------------------------

TITLE: Retrieving Task Push Notification Configuration (Response) - JSON
DESCRIPTION: JSON-RPC response returning the currently configured push notification settings for the specified task ID. Includes the URL and authentication scheme.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_10

LANGUAGE: json
CODE:
```
{
 "jsonrpc": "2.0",
 "id": 1,
 "result": {
  "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
  "pushNotificationConfig": {
   "url": "https://example.com/callback",
   "authentication": {
    "schemes": ["jwt"]
   }
  }
 }
}
```

----------------------------------------

TITLE: Receiving Set Push Notification Response in JSON-RPC
DESCRIPTION: This JSON-RPC response payload confirms that the push notification configuration for a Task has been successfully set. It returns the task ID and the configured push notification details.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_14

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "pushNotificationConfig": {
      "url": "https://example.com/callback",
      "authentication": {
        "schemes": ["jwt"]
      }
    }
  }
}
```

----------------------------------------

TITLE: Send Task Response - JSON
DESCRIPTION: Example JSON response received after successfully sending a task message with push notification configuration.
SOURCE: https://github.com/google/a2a/blob/main/docs/topics/push-notifications.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
    "status": {
      "state": "completed"
    },
    "artifacts": [{
      "name":"joke",
      "parts": [{
          "type":"text",
          "text":"Why did the chicken cross the road? To get to the other side!"
        }]
      }],
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: Server Response: Multi-Turn Task Completion
DESCRIPTION: Server responds to the client after the task has completed, potentially including generated artifacts like a booking confirmation.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/details.md#_snippet_9

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 302,
  "result": {
    "id": "task-booking-xyz",
    "sessionId": "session-def-456",
    "status": {
      "state": "completed",
      "timestamp": "2024-10-27T10:11:00Z"
    },
    "artifacts": [
      {
        "index": 0,
        "name": "booking_confirmation",
        "parts": [
          {
            "type": "data",
            "data": { "confirmationId": "LHR-XYZ123", "details": "..." }
          }
        ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Receiving Completed State for Multi-turn Task (Response) - JSON
DESCRIPTION: JSON-RPC response indicating that the task has completed processing after receiving the necessary input. Includes the task ID, session ID, status, and any resulting artifacts.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_14

LANGUAGE: json
CODE:
```
{
 "jsonrpc": "2.0",
 "id": 2,
 "result": {
  "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
  "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
  "status": {
   "state": "completed"
  },
  "artifacts": [
   {
    "name": "order-confirmation",
    "parts": [
     {
      "type": "text",
      "text": "I have ordered a new Android device for you. Your request number is R12443"
     }
    ],
    "metadata": {}
   }
  ],
  "metadata": {}
 }
}
```

----------------------------------------

TITLE: Requesting a Task in JSON-RPC
DESCRIPTION: This JSON-RPC request payload is used to retrieve the details of a specific Task by its ID. The `historyLength` parameter allows requesting the last N history items (Messages) for the task.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_9

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "tasks/get",
  "params": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "historyLength": 10,
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: Run a Sample Agent - Bash
DESCRIPTION: These commands navigate to a sample agent directory, copy the authentication environment file, and then run the sample agent using 'uv'. This makes the agent available for the demo UI to connect to via A2A.
SOURCE: https://github.com/google/a2a/blob/main/demo/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
cd ../../samples/agents/google_adk/
cp ../../../../demo/ui/.env ./
uv run .
```

----------------------------------------

TITLE: Providing Structured JSON Output (JSON)
DESCRIPTION: A JSON-RPC response containing the completed task result where the artifact's text part contains a JSON string conforming to the requested schema.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_26

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 9,
  "result": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
    "status": {
      "state": "completed",
      "timestamp": "2025-04-17T17:47:09.680794"
    },
    "artifacts": [
      {
        "parts": [
          {
            "type": "text",
            "text": "[{\"ticketNumber\":\"REQ12312\",\"description\":\"request for VPN access\"},{\"ticketNumber\":\"REQ23422\",\"description\":\"Add to DL - team-gcp-onboarding\"}]"
          }
        ],
        "index": 0
      }
    ]
  }
}
```

----------------------------------------

TITLE: Requesting Final Task Result (JSON)
DESCRIPTION: Sends a JSON-RPC request to retrieve the final result of a completed task, identified by its ID.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_23

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 10,
  "method": "tasks/get",
  "params": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: Get Task Request JSON
DESCRIPTION: Sample JSON RPC request to retrieve artifacts and history for a specific task from an agent.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "tasks/get",
  "params": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "historyLength": 10,
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: Defining Agent Skill Type Interface (TypeScript)
DESCRIPTION: Defines the TypeScript interface for the `AgentSkill` type, specifying the required properties like `id`, `name`, `description`, `tags`, and optional properties like `examples`, `inputModes`, and `outputModes`. This interface ensures type safety when defining skills.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/4-agent-skills.md#_snippet_1

LANGUAGE: ts
CODE:
```
{
  id: string; // unique identifier for the agent's skill
  name: string; //human readable name of the skill
  // description of the skill - will be used by the client or a human
  // as a hint to understand what the skill does.
  description: string;
  // Set of tag words describing classes of capabilities for this specific
  // skill (e.g. "cooking", "customer support", "billing")
  tags: string[];
  // The set of example scenarios that the skill can perform.
  // Will be used by the client as a hint to understand how the skill can be
  // used. (e.g. "I need a recipe for bread")
  examples?: string[]; // example prompts for tasks
  // The set of interaction modes that the skill supports
  // (if different than the default)
  inputModes?: string[]; // supported mime types for input
  outputModes?: string[]; // supported mime types for output
}
```

----------------------------------------

TITLE: Set Task Push Notification Config Request - JSON
DESCRIPTION: Example JSON request payload for setting or updating the push notification configuration for an existing task using the 'tasks/pushNotification/set' RPC method.
SOURCE: https://github.com/google/a2a/blob/main/docs/topics/push-notifications.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method":"tasks/pushNotification/set",
  "params": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",    
    "pushNotificationConfig": {
      "url": "https://example.com/callback",
      "authentication": {
        "schemes": ["bearer"]
      }
    }
  }
}
```

----------------------------------------

TITLE: Requesting Task Resubscription (JSON)
DESCRIPTION: Sends a JSON-RPC request to resubscribe to an existing task identified by its ID. Used by disconnected clients to resume receiving updates via Server-Sent Events (SSE).
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_17

LANGUAGE: json
CODE:
```
{
  "method": "tasks/resubscribe",
  "params": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: Sending Resubscribe Request for Task Updates (JSON)
DESCRIPTION: Allows a disconnected client to reconnect and resume receiving updates for an existing task using the `tasks/resubscribe` method. Requires the task ID.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_17

LANGUAGE: json
CODE:
```
{
 "method": "tasks/resubscribe",
 "params": {
  "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
  "metadata": {}
 }
}
```

----------------------------------------

TITLE: Task Artifact Update Event - A2A Streaming
DESCRIPTION: Event signaling a new or updated artifact associated with a task during streaming updates.
SOURCE: https://github.com/google/a2a/blob/main/llms.txt#_snippet_8

LANGUAGE: Event Definition
CODE:
```
Event: TaskArtifactUpdateEvent
Properties:
- id: string (Task ID)
- artifact: Artifact (Artifact data)
- final: boolean (Usually false, can signal end concurrently)
- metadata: object | null (Event metadata)
```

----------------------------------------

TITLE: Running the A2A Agent
DESCRIPTION: Commands to run the agent with different configuration options including custom host and port settings.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/crewai/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
# Basic run
uv run .

# On custom host/port
uv run . --host 0.0.0.0 --port 8080
```

----------------------------------------

TITLE: A2A Webhook Task Completion Notification (JSON)
DESCRIPTION: JSON request body sent by the server to the client's configured webhook URL when a long-running task completes. Contains the task ID and its final status. This request is authenticated and includes the client-provided token.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/details.md#_snippet_12

LANGUAGE: JSON
CODE:
```
{
  "taskId": "task-report-gen-777",
  "finalStatus": {
    "state": "completed",
    "timestamp": "2024-10-28T18:30:00Z"
  }
}
```

----------------------------------------

TITLE: Visualizing Agent Flow with Mermaid Diagram
DESCRIPTION: A sequence diagram illustrating the interaction flow between the A2A client, server, LangGraph agent, and Frankfurter API. It shows the complete information path, incomplete information flow requiring additional input, and streaming capabilities.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/langgraph/README.md#2025-04-21_snippet_0

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Client as A2A Client
    participant Server as A2A Server
    participant Agent as LangGraph Agent
    participant API as Frankfurter API

    Client->>Server: Send task with currency query
    Server->>Agent: Forward query to currency agent

    alt Complete Information
        Agent->>API: Call get_exchange_rate tool
        API->>Agent: Return exchange rate data
        Agent->>Server: Process data & return result
        Server->>Client: Respond with currency information
    else Incomplete Information
        Agent->>Server: Request additional input
        Server->>Client: Set state to "input-required"
        Client->>Server: Send additional information
        Server->>Agent: Forward additional info
        Agent->>API: Call get_exchange_rate tool
        API->>Agent: Return exchange rate data
        Agent->>Server: Process data & return result
        Server->>Client: Respond with currency information
    end

    alt With Streaming
        Note over Client,Server: Real-time status updates
        Server->>Client: "Looking up exchange rates..."
        Server->>Client: "Processing exchange rates..."
        Server->>Client: Final result
    end
```

----------------------------------------

TITLE: Run AG2 Agent with uv (Default Port)
DESCRIPTION: Starts the AG2 agent using the uv run command. The agent will listen for incoming A2A requests on the default port 10003.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/ag2/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
uv run .
```

----------------------------------------

TITLE: Receiving Task Cancellation Response in JSON-RPC
DESCRIPTION: This JSON-RPC response payload confirms the cancellation request for a Task. It typically includes the task ID, session ID, and the updated status reflecting the cancellation.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_12

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "sessionId": "c295ea44-7543-4f78-b524-7a38915ad6e4",
    "status": {
      "state": "canceled"
    },
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: Sequence Diagram of A2A and CrewAI Integration Flow
DESCRIPTION: Mermaid sequence diagram showing the interaction flow between A2A client, server, CrewAI agent, and Gemini API for image generation process.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/crewai/README.md#2025-04-21_snippet_0

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant Client as A2A Client
    participant Server as A2A Server
    participant Agent as CrewAI Agent
    participant API as Gemini API

    Client->>Server: Send task with text prompt
    Server->>Agent: Forward prompt to image agent
    Note over Server,Agent: Optional: Simulated streaming updates
    Agent->>API: Generate image using Gemini
    API->>Agent: Return generated image
    Agent->>Server: Store image and return ID
    Server->>Client: Respond with image artifact
```

----------------------------------------

TITLE: Setting Task Push Notification Configuration (Response) - JSON
DESCRIPTION: JSON-RPC response confirming the successful configuration of the push notification settings for the specified task ID. Returns the configured settings.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_8

LANGUAGE: json
CODE:
```
{
 "jsonrpc": "2.0",
 "id": 1,
 "result": {
  "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
  "pushNotificationConfig": {
   "url": "https://example.com/callback",
   "authentication": {
    "schemes": ["jwt"]
   }
  }
 }
}
```

----------------------------------------

TITLE: Run Semantic Kernel Agent (Custom Host/Port) (Bash)
DESCRIPTION: Starts the Semantic Kernel agent server using `uv run`, specifying a custom host (0.0.0.0) and port (8080) for the server to listen on.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/semantickernel/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
uv run . --host 0.0.0.0 --port 8080
```

----------------------------------------

TITLE: Setting Task Push Notifications in JSON-RPC
DESCRIPTION: This JSON-RPC request payload is used to configure a push notification URL and authentication scheme for a specific Task. The agent will send updates to this URL upon status changes.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_13

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "tasks/pushNotification/set",
  "params": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "pushNotificationConfig": {
      "url": "https://example.com/callback",
      "authentication": {
        "schemes": ["jwt"]
      }
    }
  }
}
```

----------------------------------------

TITLE: Running the MindsDB Agent (Bash)
DESCRIPTION: Executes the MindsDB agent application using `uv`, a fast Python package installer and runner. This command starts the agent server, typically listening on a specific port (default 10006).
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/mindsdb/README.md#_snippet_2

LANGUAGE: Bash
CODE:
```
uv run .
```

----------------------------------------

TITLE: Defining Push Notification Configuration - TypeScript
DESCRIPTION: Defines the TypeScript interfaces `PushNotificationConfig` and `TaskPushNotificationConfig` used to configure push notifications for a task within the A2A system. `PushNotificationConfig` specifies the URL, optional token, and authentication details, while `TaskPushNotificationConfig` links this configuration to a specific task ID.
SOURCE: https://github.com/google/a2a/blob/main/docs/documentation.md#_snippet_5

LANGUAGE: typescript
CODE:
```
interface PushNotificationConfig {
  url: string;
  token?: string; // token unique to this task/session
  authentication?: {
    schemes: string[];
    credentials?: string;
  };
}
interface TaskPushNotificationConfig {
  id: string; //task id
  pushNotificationConfig: PushNotificationConfig;
}
```

----------------------------------------

TITLE: Cancel Task Request JSON
DESCRIPTION: Sample JSON RPC request to cancel a previously submitted task.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/sample-messages.md#_snippet_5

LANGUAGE: json
CODE:
```
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "tasks/cancel",
  "params": {
    "id": "de38c76d-d54c-436c-8b9f-4c2703648d64",
    "metadata": {}
  }
}
```

----------------------------------------

TITLE: Running the A2A Client
DESCRIPTION: Commands to run the A2A client and connect to the agent with specified URL and port.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/crewai/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
# Connect to the agent (specify the agent URL with correct port)
cd samples/python/hosts/cli   
uv run . --agent http://localhost:10001

# If you changed the port when starting the agent, use that port instead
# uv run . --agent http://localhost:YOUR_PORT
```

----------------------------------------

TITLE: Running JavaScript Agents with Gemini API
DESCRIPTION: Commands to set up the Gemini API key and run the coder agent, followed by starting the CLI interface in a separate terminal
SOURCE: https://github.com/google/a2a/blob/main/samples/js/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
export GEMINI_API_KEY=<your_api_key>
npm run agents:coder

# in a separate terminal
npm run a2a:cli
```

----------------------------------------

TITLE: Running LlamaIndex Agent - Bash
DESCRIPTION: Uses the `uv` tool to run the LlamaIndex A2A agent. It shows the basic command for running on the default port (10010) and an alternative for specifying a custom host and port (8080). Requires `uv` to be installed and project dependencies present.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/llama_index_file_chat/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
uv run .

# On custom host/port
uv run . --host 0.0.0.0 --port 8080
```

----------------------------------------

TITLE: Setting up and running the Marvin agent server in Bash
DESCRIPTION: Commands for navigating to the project directory, setting up the Python environment, and running the Marvin agent server. It includes options for setting the OpenAI API key and specifying custom host/port.
SOURCE: https://github.com/google/a2a/blob/main/samples/python/agents/marvin/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
cd samples/python/agents/marvin

export OPENAI_API_KEY=your_api_key_here

uv venv
source .venv/bin/activate
uv sync

# Default host/port (localhost:10030)
MARVIN_DATABASE_URL=sqlite+aiosqlite:///test.db MARVIN_LOG_LEVEL=DEBUG uv run .

# Custom host/port
# uv run . --host 0.0.0.0 --port 8080
```

----------------------------------------

TITLE: Starting the Coder Agent with Gemini API Key
DESCRIPTION: Commands to set up the Gemini API key and start the Coder Agent service. The agent will run on http://localhost:41241/ after successful execution.
SOURCE: https://github.com/google/a2a/blob/main/samples/js/src/agents/coder/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
export GEMINI_API_KEY=<your_api_key>
npm run agents:coder
```

----------------------------------------

TITLE: Run A2A CLI Client to Test Streaming (Bash)
DESCRIPTION: Executes the A2A command-line interface client to interact with the running agent server. This command connects to the specified agent endpoint and allows sending tasks to test the implemented streaming functionality.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/8-agent-capabilities.md#_snippet_2

LANGUAGE: bash
CODE:
```
$ uv run google-a2a-cli --agent http://localhost:10002
```

----------------------------------------

TITLE: Define Push Notification Interfaces (TypeScript)
DESCRIPTION: Defines the interfaces for configuring push notifications, allowing an agent to notify a client of updates outside of a connected session via a PushNotificationService. Includes configuration details for the notification URL, token, and authentication.
SOURCE: https://github.com/google/a2a/blob/main/docs/specification/agent-to-agent-communication.md#_snippet_4

LANGUAGE: typescript
CODE:
```
interface PushNotificationConfig {
  url: string;
  token?: string; // token unique to this task/session
  authentication?: {
    schemes: string[];
    credentials?: string;
  };
}
interface TaskPushNotificationConfig {
  id: string; //task id
  pushNotificationConfig: PushNotificationConfig;
}
```

----------------------------------------

TITLE: Activate Virtual Environment and Run A2A CLI (Bash)
DESCRIPTION: Commands to activate the Python virtual environment and then launch the Google-A2A command-line interface, connecting it to the running A2A server.
SOURCE: https://github.com/google/a2a/blob/main/docs/tutorials/python/7-interact-with-server.md#_snippet_1

LANGUAGE: bash
CODE:
```
source .venv/bin/activate
uv run google-a2a-cli --agent http://localhost:10002
```

----------------------------------------

TITLE: Push Notifications - A2A Concept
DESCRIPTION: Mechanism for agents to proactively notify clients about task updates using webhook URLs and defined authentication.
SOURCE: https://github.com/google/a2a/blob/main/llms.txt#_snippet_23

LANGUAGE: Concept Description
CODE:
```
Concept: Push Notifications
Description: Agents notify clients via webhook URLs (set via tasks/pushNotification/set) with defined authentication (e.g., JWT).
```